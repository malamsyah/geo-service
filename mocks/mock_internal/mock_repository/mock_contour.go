// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/contour.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/contour.go -destination=mocks/mock_internal/mock_repository/mock_contour.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/malamsyah/geo-service/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockContourRepository is a mock of ContourRepository interface.
type MockContourRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContourRepositoryMockRecorder
}

// MockContourRepositoryMockRecorder is the mock recorder for MockContourRepository.
type MockContourRepositoryMockRecorder struct {
	mock *MockContourRepository
}

// NewMockContourRepository creates a new mock instance.
func NewMockContourRepository(ctrl *gomock.Controller) *MockContourRepository {
	mock := &MockContourRepository{ctrl: ctrl}
	mock.recorder = &MockContourRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContourRepository) EXPECT() *MockContourRepositoryMockRecorder {
	return m.recorder
}

// CreateContour mocks base method.
func (m *MockContourRepository) CreateContour(Contour *models.Contour) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContour", Contour)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContour indicates an expected call of CreateContour.
func (mr *MockContourRepositoryMockRecorder) CreateContour(Contour any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContour", reflect.TypeOf((*MockContourRepository)(nil).CreateContour), Contour)
}

// DeleteContour mocks base method.
func (m *MockContourRepository) DeleteContour(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContour", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContour indicates an expected call of DeleteContour.
func (mr *MockContourRepositoryMockRecorder) DeleteContour(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContour", reflect.TypeOf((*MockContourRepository)(nil).DeleteContour), id)
}

// GetContourByID mocks base method.
func (m *MockContourRepository) GetContourByID(id uint) (*models.Contour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContourByID", id)
	ret0, _ := ret[0].(*models.Contour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContourByID indicates an expected call of GetContourByID.
func (mr *MockContourRepositoryMockRecorder) GetContourByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContourByID", reflect.TypeOf((*MockContourRepository)(nil).GetContourByID), id)
}

// GetContours mocks base method.
func (m *MockContourRepository) GetContours(offset, limit int) ([]models.Contour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContours", offset, limit)
	ret0, _ := ret[0].([]models.Contour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContours indicates an expected call of GetContours.
func (mr *MockContourRepositoryMockRecorder) GetContours(offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContours", reflect.TypeOf((*MockContourRepository)(nil).GetContours), offset, limit)
}

// GetContoursIntersectArea mocks base method.
func (m *MockContourRepository) GetContoursIntersectArea(idA, idB uint) ([]models.Contour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContoursIntersectArea", idA, idB)
	ret0, _ := ret[0].([]models.Contour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContoursIntersectArea indicates an expected call of GetContoursIntersectArea.
func (mr *MockContourRepositoryMockRecorder) GetContoursIntersectArea(idA, idB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContoursIntersectArea", reflect.TypeOf((*MockContourRepository)(nil).GetContoursIntersectArea), idA, idB)
}

// UpdateContour mocks base method.
func (m *MockContourRepository) UpdateContour(contour *models.Contour) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContour", contour)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContour indicates an expected call of UpdateContour.
func (mr *MockContourRepositoryMockRecorder) UpdateContour(contour any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContour", reflect.TypeOf((*MockContourRepository)(nil).UpdateContour), contour)
}
