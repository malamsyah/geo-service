// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/geometry.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/geometry.go -destination=mocks/mock_internal/mock_service/mock_geometry.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/malamsyah/geo-service/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockGeometryService is a mock of GeometryService interface.
type MockGeometryService struct {
	ctrl     *gomock.Controller
	recorder *MockGeometryServiceMockRecorder
}

// MockGeometryServiceMockRecorder is the mock recorder for MockGeometryService.
type MockGeometryServiceMockRecorder struct {
	mock *MockGeometryService
}

// NewMockGeometryService creates a new mock instance.
func NewMockGeometryService(ctrl *gomock.Controller) *MockGeometryService {
	mock := &MockGeometryService{ctrl: ctrl}
	mock.recorder = &MockGeometryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeometryService) EXPECT() *MockGeometryServiceMockRecorder {
	return m.recorder
}

// CreateContour mocks base method.
func (m *MockGeometryService) CreateContour(Contour *models.Contour) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContour", Contour)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContour indicates an expected call of CreateContour.
func (mr *MockGeometryServiceMockRecorder) CreateContour(Contour any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContour", reflect.TypeOf((*MockGeometryService)(nil).CreateContour), Contour)
}

// CreatePoint mocks base method.
func (m *MockGeometryService) CreatePoint(point *models.Point) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoint", point)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePoint indicates an expected call of CreatePoint.
func (mr *MockGeometryServiceMockRecorder) CreatePoint(point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoint", reflect.TypeOf((*MockGeometryService)(nil).CreatePoint), point)
}

// DeleteContour mocks base method.
func (m *MockGeometryService) DeleteContour(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContour", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContour indicates an expected call of DeleteContour.
func (mr *MockGeometryServiceMockRecorder) DeleteContour(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContour", reflect.TypeOf((*MockGeometryService)(nil).DeleteContour), id)
}

// GetContourByID mocks base method.
func (m *MockGeometryService) GetContourByID(id uint) (*models.Contour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContourByID", id)
	ret0, _ := ret[0].(*models.Contour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContourByID indicates an expected call of GetContourByID.
func (mr *MockGeometryServiceMockRecorder) GetContourByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContourByID", reflect.TypeOf((*MockGeometryService)(nil).GetContourByID), id)
}

// GetContours mocks base method.
func (m *MockGeometryService) GetContours(offset, limit int) ([]models.Contour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContours", offset, limit)
	ret0, _ := ret[0].([]models.Contour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContours indicates an expected call of GetContours.
func (mr *MockGeometryServiceMockRecorder) GetContours(offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContours", reflect.TypeOf((*MockGeometryService)(nil).GetContours), offset, limit)
}

// GetContoursIntersectArea mocks base method.
func (m *MockGeometryService) GetContoursIntersectArea(contourIDA, contourIDB uint) ([]models.Contour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContoursIntersectArea", contourIDA, contourIDB)
	ret0, _ := ret[0].([]models.Contour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContoursIntersectArea indicates an expected call of GetContoursIntersectArea.
func (mr *MockGeometryServiceMockRecorder) GetContoursIntersectArea(contourIDA, contourIDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContoursIntersectArea", reflect.TypeOf((*MockGeometryService)(nil).GetContoursIntersectArea), contourIDA, contourIDB)
}

// GetPointByID mocks base method.
func (m *MockGeometryService) GetPointByID(id uint) (*models.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointByID", id)
	ret0, _ := ret[0].(*models.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPointByID indicates an expected call of GetPointByID.
func (mr *MockGeometryServiceMockRecorder) GetPointByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointByID", reflect.TypeOf((*MockGeometryService)(nil).GetPointByID), id)
}

// GetPoints mocks base method.
func (m *MockGeometryService) GetPoints(offset, limit int) ([]models.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoints", offset, limit)
	ret0, _ := ret[0].([]models.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoints indicates an expected call of GetPoints.
func (mr *MockGeometryServiceMockRecorder) GetPoints(offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoints", reflect.TypeOf((*MockGeometryService)(nil).GetPoints), offset, limit)
}

// GetPointsByContourID mocks base method.
func (m *MockGeometryService) GetPointsByContourID(contourID uint) ([]models.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointsByContourID", contourID)
	ret0, _ := ret[0].([]models.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPointsByContourID indicates an expected call of GetPointsByContourID.
func (mr *MockGeometryServiceMockRecorder) GetPointsByContourID(contourID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointsByContourID", reflect.TypeOf((*MockGeometryService)(nil).GetPointsByContourID), contourID)
}

// IsValidContour mocks base method.
func (m *MockGeometryService) IsValidContour(Contour *models.Contour) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidContour", Contour)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidContour indicates an expected call of IsValidContour.
func (mr *MockGeometryServiceMockRecorder) IsValidContour(Contour any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidContour", reflect.TypeOf((*MockGeometryService)(nil).IsValidContour), Contour)
}

// IsValidPoint mocks base method.
func (m *MockGeometryService) IsValidPoint(point *models.Point) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidPoint", point)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidPoint indicates an expected call of IsValidPoint.
func (mr *MockGeometryServiceMockRecorder) IsValidPoint(point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidPoint", reflect.TypeOf((*MockGeometryService)(nil).IsValidPoint), point)
}

// UpdateContour mocks base method.
func (m *MockGeometryService) UpdateContour(Contour *models.Contour) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContour", Contour)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContour indicates an expected call of UpdateContour.
func (mr *MockGeometryServiceMockRecorder) UpdateContour(Contour any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContour", reflect.TypeOf((*MockGeometryService)(nil).UpdateContour), Contour)
}
